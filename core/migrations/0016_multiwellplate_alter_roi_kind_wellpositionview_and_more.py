# Generated by Django 4.2.4 on 2023-09-23 17:59

import core.enums
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import simple_history.models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("authentikate", "0002_alter_user_unique_together_and_more"),
        ("core", "0015_pixelview_label_historicalpixelview"),
    ]

    operations = [
        migrations.CreateModel(
            name="MultiWellPlate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="A name for the multiwell plate",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="A description for the multiwell plate",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "rows",
                    models.IntegerField(
                        help_text="The number of rows in the multiwell plate"
                    ),
                ),
                (
                    "columns",
                    models.IntegerField(
                        help_text="The number of columns in the multiwell plate"
                    ),
                ),
                (
                    "pinned_by",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The users that have pinned the stage",
                        related_name="pinned_multiwellplates",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="roi",
            name="kind",
            field=django_choices_field.fields.TextChoicesField(
                choices=[
                    ("ellipse", "Ellipse"),
                    ("polygon", "POLYGON"),
                    ("line", "Line"),
                    ("rectangle", "Rectangle (XY)"),
                    ("spectral_rectangle", "Spectral Rectangle (XYC)"),
                    ("temporal_rectangle", "Temporal Rectangle (XYT)"),
                    ("cube", "Cube (XYZ)"),
                    ("spectral_cube", "Spectral Cube (XYZC)"),
                    ("temporal_cube", "Temporal Cube (XYZT)"),
                    ("hypercube", "Hypercube (XYZT)"),
                    ("spectral_hypercube", "Spectral Hypercube (XYZTC)"),
                    ("path", "Path"),
                    ("unknown", "Unknown"),
                    ("frame", "Frame"),
                    ("slice", "Slice"),
                    ("point", "Point"),
                ],
                choices_enum=core.enums.RoiKind,
                default="unknown",
                help_text="The Roi can have vasrying kind, consult your API",
                max_length=18,
            ),
        ),
        migrations.CreateModel(
            name="WellPositionView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "z_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "z_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False, help_text="Whether the view is global or not"
                    ),
                ),
                ("row", models.IntegerField(help_text="The row of the well")),
                ("column", models.IntegerField(help_text="The column of the well")),
                (
                    "collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.viewcollection",
                    ),
                ),
                (
                    "image",
                    simple_history.models.HistoricForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.image"
                    ),
                ),
                (
                    "well",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="views",
                        to="core.multiwellplate",
                    ),
                ),
            ],
            options={
                "default_related_name": "wellposition_views",
            },
        ),
        migrations.CreateModel(
            name="HistoricalWellPositionView",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "z_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "z_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False, help_text="Whether the view is global or not"
                    ),
                ),
                ("row", models.IntegerField(help_text="The row of the well")),
                ("column", models.IntegerField(help_text="The column of the well")),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.viewcollection",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.wellpositionview",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "image",
                    simple_history.models.HistoricForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.image",
                    ),
                ),
                (
                    "well",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.multiwellplate",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical well position view",
                "verbose_name_plural": "historical well position views",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="HistoricalMultiWellPlate",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                (
                    "name",
                    models.CharField(
                        blank=True,
                        help_text="A name for the multiwell plate",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="A description for the multiwell plate",
                        max_length=1000,
                        null=True,
                    ),
                ),
                (
                    "rows",
                    models.IntegerField(
                        help_text="The number of rows in the multiwell plate"
                    ),
                ),
                (
                    "columns",
                    models.IntegerField(
                        help_text="The number of columns in the multiwell plate"
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.multiwellplate",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "historical multi well plate",
                "verbose_name_plural": "historical multi well plates",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name="ContinousScanView",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "z_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "z_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "x_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "y_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "t_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_min",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "c_max",
                    models.IntegerField(
                        blank=True, help_text="The index of the channel", null=True
                    ),
                ),
                (
                    "is_global",
                    models.BooleanField(
                        default=False, help_text="Whether the view is global or not"
                    ),
                ),
                (
                    "direction",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("row_column_slice", "Row -> Column -> Slice"),
                            ("column_row_slice", "Column -> Row -> Slice"),
                            ("slice_row_column", "Slice -> Row -> Column"),
                            (
                                "row_column_slice_snake",
                                "Row -> Column -> Slice (Snake)",
                            ),
                            (
                                "column_row_slice_snake",
                                "Column -> Row -> Slice (Snake)",
                            ),
                            (
                                "slice_row_column_snake",
                                "Slice -> Row -> Column (Snake)",
                            ),
                        ],
                        choices_enum=core.enums.ContinousScanDirection,
                        help_text="The direction of the scan",
                        max_length=22,
                    ),
                ),
                (
                    "collection",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="core.viewcollection",
                    ),
                ),
                (
                    "image",
                    simple_history.models.HistoricForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.image"
                    ),
                ),
            ],
            options={
                "default_related_name": "continousscan_views",
            },
        ),
    ]
