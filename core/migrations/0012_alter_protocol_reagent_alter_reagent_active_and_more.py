# Generated by Django 4.2.8 on 2024-09-14 12:31

import core.enums
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django_choices_field.fields
import simple_history.models


class Migration(migrations.Migration):
    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("authentikate", "0002_alter_user_unique_together_and_more"),
        ("core", "0011_rename_lot_number_reagent_lot_id_reagent_active_and_more"),
    ]

    operations = [
        migrations.AlterField(
            model_name="protocol",
            name="reagent",
            field=models.ForeignKey(
                help_text="This field is set if the protocol step is used to create another reagent",
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name="protocol",
                to="core.reagent",
            ),
        ),
        migrations.AlterField(
            model_name="reagent",
            name="active",
            field=models.BooleanField(
                default=False,
                help_text="Whether the reagent is the active stock for most experiments",
            ),
        ),
        migrations.AlterField(
            model_name="reagentmapping",
            name="reagent",
            field=models.ForeignKey(
                help_text="The reagent that this mapping is for",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reagentmappings",
                to="core.reagent",
            ),
        ),
        migrations.AlterField(
            model_name="reagentmapping",
            name="step",
            field=models.ForeignKey(
                help_text="The step that this mapping is for",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="reagentmappings",
                to="core.protocolstep",
            ),
        ),
        migrations.CreateModel(
            name="HistoricalROI",
            fields=[
                (
                    "id",
                    models.BigIntegerField(
                        auto_created=True, blank=True, db_index=True, verbose_name="ID"
                    ),
                ),
                (
                    "assignation_id",
                    models.CharField(blank=True, max_length=1000, null=True),
                ),
                ("entity", models.CharField(blank=True, max_length=1000, null=True)),
                (
                    "vectors",
                    models.JSONField(
                        default=list,
                        help_text="A list of the ROI Vectors (specific for each type)",
                        max_length=3000,
                    ),
                ),
                (
                    "kind",
                    django_choices_field.fields.TextChoicesField(
                        choices=[
                            ("ellipse", "Ellipse"),
                            ("polygon", "POLYGON"),
                            ("line", "Line"),
                            ("rectangle", "Rectangle (XY)"),
                            ("spectral_rectangle", "Spectral Rectangle (XYC)"),
                            ("temporal_rectangle", "Temporal Rectangle (XYT)"),
                            ("cube", "Cube (XYZ)"),
                            ("spectral_cube", "Spectral Cube (XYZC)"),
                            ("temporal_cube", "Temporal Cube (XYZT)"),
                            ("hypercube", "Hypercube (XYZT)"),
                            ("spectral_hypercube", "Spectral Hypercube (XYZTC)"),
                            ("path", "Path"),
                            ("unknown", "Unknown"),
                            ("frame", "Frame"),
                            ("slice", "Slice"),
                            ("point", "Point"),
                        ],
                        choices_enum=core.enums.RoiKindChoices,
                        default="path",
                        help_text="The Roi can have vasrying kind, consult your API",
                        max_length=18,
                    ),
                ),
                (
                    "color",
                    models.CharField(
                        blank=True,
                        help_text="The color of the ROI (for UI)",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        blank=True,
                        editable=False,
                        help_text="The time the ROI was created",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        blank=True,
                        help_text="The label of the ROI (for UI)",
                        max_length=1000,
                        null=True,
                    ),
                ),
                ("history_id", models.AutoField(primary_key=True, serialize=False)),
                ("history_date", models.DateTimeField(db_index=True)),
                ("history_change_reason", models.CharField(max_length=100, null=True)),
                (
                    "history_type",
                    models.CharField(
                        choices=[("+", "Created"), ("~", "Changed"), ("-", "Deleted")],
                        max_length=1,
                    ),
                ),
                (
                    "app",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="authentikate.app",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The user that created the ROI",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The group this ROI belongs to",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.roigroup",
                    ),
                ),
                (
                    "history_relation",
                    models.ForeignKey(
                        db_constraint=False,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="provenance",
                        to="core.roi",
                    ),
                ),
                (
                    "history_user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "image",
                    models.ForeignKey(
                        blank=True,
                        db_constraint=False,
                        help_text="The Representation this ROI was original used to create (drawn on)",
                        null=True,
                        on_delete=django.db.models.deletion.DO_NOTHING,
                        related_name="+",
                        to="core.image",
                    ),
                ),
            ],
            options={
                "verbose_name": "historical roi",
                "verbose_name_plural": "historical rois",
                "ordering": ("-history_date", "-history_id"),
                "get_latest_by": ("history_date", "history_id"),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
